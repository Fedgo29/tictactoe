{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\",\n  class: \"game\"\n};\nconst _hoisted_2 = {\n  class: \"board\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"winner\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AppHeader = _resolveComponent(\"AppHeader\");\n  const _component_AppFooter = _resolveComponent(\"AppFooter\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_AppHeader), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.board, (cell, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"cell\", {\n        'cell-x': cell === 'X',\n        'cell-o': cell === 'O'\n      }]),\n      onClick: $event => $setup.makeMove(index)\n    }, _toDisplayString(cell), 11 /* TEXT, CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), $setup.winner ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"p\", null, _toDisplayString($setup.winnerMessage), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.resetGame && $setup.resetGame(...args))\n  }, \"Reiniciar Juego\")])) : _createCommentVNode(\"v-if\", true)]), _createVNode(_component_AppFooter)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["id","class","key","_createElementBlock","_Fragment","_createVNode","_component_AppHeader","_createElementVNode","_hoisted_1","_hoisted_2","_renderList","$setup","board","cell","index","_normalizeClass","onClick","$event","makeMove","_hoisted_3","winner","_hoisted_4","_toDisplayString","winnerMessage","_cache","args","resetGame","_createCommentVNode","_component_AppFooter"],"sources":["C:\\Users\\Edgar\\Documents\\GitHub\\tictactoe\\tictactoe\\src\\App.vue"],"sourcesContent":["<template>\n  <AppHeader />\n  <div id=\"app\" class=\"game\">\n    <div class=\"board\">\n      <div v-for=\"(cell, index) in board\" :key=\"index\" class=\"cell\" :class=\"{ 'cell-x': cell === 'X', 'cell-o': cell === 'O' }\" @click=\"makeMove(index)\">\n        {{ cell }}\n      </div>\n    </div>\n    <div v-if=\"winner\" class=\"winner\">\n      <p>{{ winnerMessage }}</p>\n      <button @click=\"resetGame\">Reiniciar Juego</button>\n    </div>\n  </div>\n  <AppFooter />\n</template>\n\n<script>\nimport { ref, computed } from \"vue\";\nimport AppHeader from './components/Header.vue';\nimport AppFooter from './components/Footer.vue';\n\n\nexport default {\n  name: \"TicTacToe\",\n  components: {\n    AppHeader,\n  },\n  setup() {\n    const board = ref(Array(9).fill(null));\n    const currentPlayer = ref(\"X\");\n    const winner = ref(null);\n\n    const winnerMessage = computed(() => {\n      return winner.value ? `ยก${winner.value} gana!` : \"\";\n    });\n\n    const winningCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    const checkWinner = () => {\n      for (const combination of winningCombinations) {\n        const [a, b, c] = combination;\n        if (\n          board.value[a] &&\n          board.value[a] === board.value[b] &&\n          board.value[a] === board.value[c]\n        ) {\n          winner.value = board.value[a];\n          return;\n        }\n      }\n      if (board.value.every((cell) => cell)) {\n        winner.value = \"Empate\";\n      }\n    };\n\n    const makeMove = (index) => {\n      if (!board.value[index] && !winner.value) {\n        board.value[index] = currentPlayer.value;\n        checkWinner();\n        currentPlayer.value = currentPlayer.value === \"X\" ? \"O\" : \"X\";\n      }\n    };\n\n    const resetGame = () => {\n      board.value = Array(9).fill(null);\n      currentPlayer.value = \"X\";\n      winner.value = null;\n    };\n\n    return {\n      board,\n      currentPlayer,\n      winner,\n      winnerMessage,\n      makeMove,\n      resetGame,\n    };\n  },\n};\n</script>\n\n<style>\n* {\n  box-sizing: border-box;\n}\nhtml, body {\n  margin: 0;\n  padding: 0;\n\n}\n.game {\n  font-family: Arial, sans-serif;\n  text-align: center;\n  margin-top: 50px;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(3, 100px);\n  grid-gap: 5px;\n  justify-content: center;\n  margin: 20px auto;\n}\n\n.cell {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 2px solid #444;\n  font-size: 24px;\n  font-weight: bold;\n  cursor: pointer;\n  background-color: #fff;\n}\n\n.cell-x {\n  color: #2196f3;\n}\n\n.cell-o {\n  color: #f44336;\n}\n\n.winner {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";;EAEOA,EAAE,EAAC,KAAK;EAACC,KAAK,EAAC;;;EACbA,KAAK,EAAC;AAAO;mBAHtB;;EAAAC,GAAA;EAQuBD,KAAK,EAAC;;;;;uBAR7BE,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAAaC,oBAAA,GACbC,mBAAA,CAUM,OAVNC,UAUM,GATJD,mBAAA,CAIM,OAJNE,UAIM,I,kBAHJN,mBAAA,CAEMC,SAAA,QANZM,WAAA,CAImCC,MAAA,CAAAC,KAAK,EAJxC,CAImBC,IAAI,EAAEC,KAAK;yBAAxBX,mBAAA,CAEM;MAF+BD,GAAG,EAAEY,KAAK;MAAEb,KAAK,EAJ5Dc,eAAA,EAI6D,MAAM;QAAA,UAAqBF,IAAI;QAAA,UAAoBA,IAAI;MAAA;MAAaG,OAAK,EAAAC,MAAA,IAAEN,MAAA,CAAAO,QAAQ,CAACJ,KAAK;wBAC3ID,IAAI,gCALfM,UAAA;oCAQeR,MAAA,CAAAS,MAAM,I,cAAjBjB,mBAAA,CAGM,OAHNkB,UAGM,GAFJd,mBAAA,CAA0B,WAAAe,gBAAA,CAApBX,MAAA,CAAAY,aAAa,kBACnBhB,mBAAA,CAAmD;IAA1CS,OAAK,EAAAQ,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEd,MAAA,CAAAe,SAAA,IAAAf,MAAA,CAAAe,SAAA,IAAAD,IAAA,CAAS;KAAE,iBAAe,E,KAVhDE,mBAAA,e,GAaEtB,YAAA,CAAauB,oBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}